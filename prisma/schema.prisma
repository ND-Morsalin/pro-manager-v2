// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  // previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  mobile    String   @unique
  pincode   String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  MODERATOR
}


//**************************/
// Business Contact Info Model start
//**************************/
model BusinessContactInfo {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  phoneNumber  String
  organization String
  // ShopOwner id
  shopOwner    ShopOwner @relation(fields: [shopOwnerId], references: [id], onDelete: Cascade)
  shopOwnerId  String    @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//**************************/
// Business Contact Info Model end
//**************************/



//**************************/
// Cash Model start
//**************************/

model Cash {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  cashBalance Float @default(0)

  cashInHistory  CashInHistory[]
  cashOutHistory CashOutHistory[]

  // ShopOwner id
  shopOwner   ShopOwner @relation(fields: [shopOwnerId], references: [id], onDelete: Cascade)
  shopOwnerId String    @unique @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CashInHistory {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  cashInAmount Float
  cashInDate   DateTime @default(now())
  cashInFor    String

  // ShopOwner id
  shopOwner   ShopOwner @relation(fields: [shopOwnerId], references: [id], onDelete: Cascade)
  shopOwnerId String    @db.ObjectId

  cash   Cash   @relation(fields: [cashId], references: [id], onDelete: Cascade)
  cashId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CashOutHistory {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  cashOutAmount Float
  cashOutFor    String
  cashOutDate   DateTime @default(now())

  // ShopOwner id
  shopOwner   ShopOwner @relation(fields: [shopOwnerId], references: [id], onDelete: Cascade)
  shopOwnerId String    @db.ObjectId

  cash   Cash   @relation(fields: [cashId], references: [id], onDelete: Cascade)
  cashId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//**************************/
// Cash Model end
//**************************/



//**************************/
// Customer Model start
//**************************/
model Customer {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  customerName String
  phoneNumber  String
  otherMobiles String[] @default([])
  address      String
  deuAmount    Float @default(0)
  paidAmount   Float @default(0)
  // customer payment history

  // ShopOwner id
  shopOwner   ShopOwner @relation(fields: [shopOwnerId], references: [id], onDelete: Cascade)
  shopOwnerId String    @unique @db.ObjectId

  customerPaymentHistories CustomerPaymentHistory[]

  invoiceHistory ProductVoicer[]

  // productGive    ProductGive[]
  // productReceive ProductReceive[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CustomerPaymentHistory {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  paymentAmount Float
  deuAmount     Float?
  paymentStatus PaymentStatus
  paymentDate   DateTime      @default(now())
  note          String?

  shopOwner   ShopOwner @relation(fields: [shopOwnerId], references: [id], onDelete: Cascade)
  shopOwnerId String    @db.ObjectId

  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String   @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//**************************/
// Customer Model end
//**************************/

enum PaymentStatus {
  SHOPOWNERRECIVED
  SHOPOWNERGIVE
}


//**************************/
// Dashboard  Model start
//**************************/
model Dashboard {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  shopOwner   ShopOwner @relation(fields: [shopOwnerId], references: [id], onDelete: Cascade)
  shopOwnerId String    @db.ObjectId  // Reference to the shop owner
  date        DateTime // Date of the report (e.g., 2025-07-06 for daily)
  month       String // Month name (e.g., "July")
  year        String // Year (e.g., "2025")

  totalSales        Float @default(0) // Total sales amount for the day/month
  totalOrders       Int   @default(0) // Total number of orders for the day/month
  totalCustomers    Int   @default(0) // Total number of unique customers for the day/month
  totalProductsSold Int   @default(0) // Total number of products sold for the day/month

  totalLosses Float @default(0) // Total losses incurred for the day/month
  totalProfit Float @default(0) // Total profit made for the day/month

  totalInvoices Int @default(0) // Total number of invoices generated for the day/month

  totalInvestments Float @default(0) // Total investments made for the day/month

  totalDueFromCustomers Float @default(0) // Total amount due from customers for the day/month
  totalDueToSuppliers   Float @default(0) // Total amount due to suppliers for  the day/month

  totalProductsOnStock Int @default(0) // Total number of products in stock for the day/month

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([shopOwnerId, date]) // Index for faster queries by shopOwnerId and date
  @@index([shopOwnerId, month, year]) // Index for faster monthly/yearly queries
}

//**************************/
// Dashboard  Model end
//**************************/




//**************************/
// Lone Model start
//**************************/
model LoneProvider {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  loneProviderName String
  phoneNumber      String
  address          String
  note             String?
  loneTakenDate    DateTime
  totalLoneTaken   Float @default(0)
  loneDeuAmount    Float @default(0)
  lonePaidAmount   Float @default(0)
  // paymentHistory
  // ShopOwner id
  shopOwner        ShopOwner @relation(fields: [shopOwnerId], references: [id], onDelete: Cascade)
  shopOwnerId      String    @db.ObjectId

  lonePaymentHistories LonePaymentHistory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LonePaymentHistory {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  givingAmount      Float
  lonePaymentStatus PaymentStatus // enum SHOPOWNERRECIVED SHOPOWNERGIVE
  // shopOwnerId
  lonePaymentDate   DateTime      @default(now())

  shopOwner      ShopOwner    @relation(fields: [shopOwnerId], references: [id], onDelete: Cascade)
  shopOwnerId    String       @db.ObjectId
  note           String?
  loneProvider   LoneProvider @relation(fields: [loneProviderId], references: [id], onDelete: Cascade)
  loneProviderId String       @db.ObjectId
}

//**************************/
// Lone Model end
//**************************/



model Note {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  shopOwnerId String    @db.ObjectId
  shopOwner   ShopOwner @relation(fields: [shopOwnerId], references: [id], onDelete: Cascade)
  title       String
  note        String
  isComplete  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}


//**************************/
// Product Model start
//**************************/
model Product {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  productName String

  // sum of stokeAmount of inventory.//! for reducing the calculation when any product enter o stock then it will increase and when any selling then the total amount will decrease
  totalStokeAmount Float @default(0)
  totalSold Float @default(0) // how many products are sold  

  // the current price in market //! same 
  currentSellingPrice Float @default(0)

  // sum of each inventory (buyingPrice x stokeAmount) //! same 
  totalInvestment Float @default(0)

  // when sell then calculate how much profit are getting  //! same 
  //? totalSellingAmount = (sellingQuantity * currentSellingPrice)
  //? totalBuying = (sellingQuantity * buyingPrice)
  //?* profit = (sellingQuantity * currentSellingPrice) - (sellingQuantity * buyingPrice)
  //?! loss = (sellingQuantity * buyingPrice) - (sellingQuantity * currentSellingPrice)
  totalProfit Float @default(0)
  totalLoss   Float @default(0)

  productCategory   String
  productCategoryID String
  productBrand      String
  unit              String // kg , hali, litter, pic, packate
  //* need to add shop owner id */
  shopOwner         ShopOwner @relation(fields: [shopOwnerId], references: [id], onDelete: Cascade)
  shopOwnerId       String    @db.ObjectId

  // sellingHistory SellingProduct[]

  productGive    ProductGive[]
  productReceive ProductReceive[]
  inventories    Inventory[]

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  SellingProduct   SellingProduct?
  

  purchasedHistories PurchasedHistoryProduct[] // Relation to the join table
}

enum DiscountType {
  FLAT
  PERCENTAGE
}

enum PaymentType {
  CASH
  BANK_CHEQUE
}
model Inventory {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  buyingPrice  Float
  sellingPrice Float
  stokeAmount  Float
  product      Product @relation(fields: [productId], references: [id] ,onDelete: Cascade)
  productId    String  @db.ObjectId

  supplierId         String?           @db.ObjectId
  supplier           Supplier?         @relation(fields: [supplierId], references: [id])
  purchasedHistoryId String?           @unique @db.ObjectId
  

  shopOwner   ShopOwner @relation(fields: [shopOwnerId], references: [id], onDelete: Cascade)
  shopOwnerId String    @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  PurchasedHistoryProduct PurchasedHistoryProduct[]
}

//**************************/
// Product Model end
//**************************/

//**************************/
// Raw Product Model start
//**************************/
model RawProduct {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  quantity      Float
  buyingPrice   Float
  sellingPrice  Float
  rawCategory   String
  rawCategoryID String    @db.ObjectId
  brandName     String
  unit          String // kg , hali, litter, pic, packate
  //* need to add shop owner id */
  shopOwner     ShopOwner @relation(fields: [shopOwnerId], references: [id], onDelete: Cascade)
  shopOwnerId   String    @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  RawProductHistory RawProductHistory[]
}

//**************************/
// Raw Product Model end
//**************************/

//**************************/
// Raw Category Model start
//**************************/

model RawCategory {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  shopOwner   ShopOwner @relation(fields: [shopOwnerId], references: [id], onDelete: Cascade)
  shopOwnerId String    @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//**************************/
// Raw Category Model end
//**************************/

model Category {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  shopOwnerId String @db.ObjectId
  category    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RawProductHistory {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  rawProduct      RawProduct     @relation(fields: [rawProductId], references: [id], onDelete: Cascade)
  rawProductId    String         @db.ObjectId
  shopOwner       ShopOwner      @relation(fields: [shopOwnerId], references: [id], onDelete: Cascade)
  shopOwnerId     String         @db.ObjectId
  stockInOut      StockInOutType
  quantity        Float          @default(0)
  buyingPrice     Float          @default(0)
  sellingPrice    Float          @default(0)
  note            String?
  transactionDate DateTime       @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum StockInOutType {
  RawProductIn
  RawProductOut
}

//**************************/
// Product Voicer Model start
//**************************/
model ProductVoicer {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  totalBillAmount Float
  paidAmount      Float
  remainingDue    Float
  discountAmount  Float?
  labourCost      Float?
  dhor            Float?

  customerName   String?
  address        String?
  phone          String?
  totalPrice     Float?
  beforeDue      Float?
  nowPaying      Float?
  shopOwnerName  String?
  shopOwnerPhone String

  shopOwner   ShopOwner @relation(fields: [shopOwnerId], references: [id], onDelete: Cascade)
  shopOwnerId String    @db.ObjectId

  customer   Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String?   @db.ObjectId

  sellingProducts SellingProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SellingProduct {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  productName  String
  sellingPrice Float
  quantity     Float
  unit         String
  totalPrice   Float // sellingPrice * stokeAmount

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @unique @db.ObjectId

  // ShopOwner id
  shopOwner   ShopOwner @relation(fields: [shopOwnerId], references: [id], onDelete: Cascade)
  shopOwnerId String    @db.ObjectId

  productVoicer   ProductVoicer @relation(fields: [productVoicerId], references: [id], onDelete: Cascade)
  productVoicerId String        @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//**************************/
// Product Voicer Model end
//**************************/
model InvoiceCounter {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  shopOwnerId       String @unique
  lastInvoiceNumber Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



model ProductGive {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  shopOwnerId String  @db.ObjectId
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String  @db.ObjectId

  // customer    Customer          @relation(fields: [customerId], references: [id])
  // customerId  String            @db.ObjectId
  amount      Float
  reason      String
  quantity    String?
  status      ReceiveGiveStatus @default(HANDOVER_TO_CUSTOMER)
  companyName String?
  note        String?
}

model ProductReceive {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  shopOwnerId String            @db.ObjectId
  product     Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String            @db.ObjectId
  // customerId  String?            @db.ObjectId
  // customer    Customer          @relation(fields: [customerId], references: [id])
  amount      Float
  reason      String
  quantity    String?
  status      ReceiveGiveStatus @default(RECEIVE_FROM_CUSTOMER)
  companyName String?
  note        String?
}

enum ReceiveGiveStatus {
  RECEIVE_FROM_CUSTOMER
  HANDOVER_TO_CUSTOMER
  PRODUCT_ON_SHOP
  PRODUCT_ON_SUPPLIER
}


model PurchasedHistory {
  id             String                    @id @default(auto()) @map("_id") @db.ObjectId
  shopOwnerId    String                    @db.ObjectId
  shopOwner      ShopOwner                 @relation(fields: [shopOwnerId], references: [id], onDelete: Cascade)
  due            Float                     @default(0) // how much due 
  paid           Float                     @default(0) // total paid
  cost           Float                     @default(0) // labour cost
  totalPrice     Float                     @default(0) // how much is purchased price paid + due 
  discountType   DiscountType              @default(FLAT)
  discountAmount Float                     @default(0)
  paymentType    PaymentType               @default(CASH)
  supplierId     String                    @db.ObjectId
  supplier       Supplier                  @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  products       PurchasedHistoryProduct[] // Relation to the join table

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PurchasedHistoryProduct {
  id                 String           @id @default(auto()) @map("_id") @db.ObjectId
  purchasedHistoryId String           @db.ObjectId
  purchasedHistory   PurchasedHistory @relation(fields: [purchasedHistoryId], references: [id], onDelete: Cascade)
  productId          String           @db.ObjectId
  inventory          Inventory?       @relation(fields: [inventoryId], references: [id])
  inventoryId        String?          @db.ObjectId
  product            Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
}


//**************************/
// Purchase Report Model start
//**************************/
model PurchaseReport {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  shopOwner         ShopOwner @relation(fields: [shopOwnerId], references: [id], onDelete: Cascade)
  shopOwnerId       String    @db.ObjectId
  date              DateTime  // Date of the report (e.g., 2025-07-06 for daily)
  month             String    // Month name (e.g., "July")
  year              String    // Year (e.g., "2025")
  purchaseHistoryIds String[]  @db.ObjectId // Array of PurchasedHistory IDs
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([shopOwnerId, date]) // Index for faster queries by shopOwnerId and date
  @@index([shopOwnerId, month, year]) // Index for faster monthly/yearly queries
}
//**************************/
// Purchase Report Model end
//**************************/

//**************************/
// Shop Owner Model start
//**************************/

model ShopOwner {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  shopName     String
  mobile       String   @unique
  otherMobiles String[] @default([])
  address      String?
  pincode      String
  otp          String?
  smsBalance   Int      @default(0)
  //  relations with product, customer, loneProvider, businessContactInfo model
  //  shopOwner can have multiple product, customer, loneProvider, businessContactInfo

  // shopOwner can have multiple product
  products  Product[]
  // shopOwner can have multiple customer
  customers Customer[]

  // shopOwner can have multiple loneProvider
  loneProviders LoneProvider[]

  // shopOwner can have multiple businessContactInfo
  businessContactInfos BusinessContactInfo[]

  // shopOwner can have multiple customerPaymentHistory
  customerPaymentHistories CustomerPaymentHistory[]
  // shopOwner can have multiple lonePaymentHistory
  lonePaymentHistories     LonePaymentHistory[]

  // shopOwner can have multiple productVoicer
  productVoicers ProductVoicer[]

  // shopOwner can have multiple sellingProduct
  sellingProducts SellingProduct[]

  // shopOwner can have multiple cash
  cashs Cash[]

  cashInHistory  CashInHistory[]
  cashOutHistory CashOutHistory[]
  notes          Note[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  shopOwnerSMS ShopOwnerSMS?

  RawProduct RawProduct[]

  RawCategory RawCategory[]

  Supplier Supplier[]

  RawProductHistory RawProductHistory[]

  PurchasedHistory PurchasedHistory[]

  Inventory Inventory[]

  PurchaseReport PurchaseReport[]

  SMSOrder SMSOrder[]

  Dashboard Dashboard[]

  SupplierPaymentHistory SupplierPaymentHistory[]
}

//**************************/
// Shop Owner Model end
//**************************/


//  this is one to one relation with shopOwner it i current balance
model ShopOwnerSMS {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  shopOwnerId String    @unique @db.ObjectId
  shopOwner   ShopOwner @relation(fields: [shopOwnerId], references: [id], onDelete: Cascade)
  smsAmount   Float
  smsPrice    Float?
  expireDate  DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// only create by admin 
model SMSPackages {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  packageName String
  smsAmount  Float
  smsPrice   Float
  expireDays Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  SMSOrder SMSOrder[]
}

model SMSOrder {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  shopOwnerId String    @db.ObjectId
  shopOwner   ShopOwner @relation(fields: [shopOwnerId], references: [id], onDelete: Cascade)

  smsPackageId String      @db.ObjectId
  smsPackage   SMSPackages @relation(fields: [smsPackageId], references: [id], onDelete: Cascade)
  isPaid       Boolean     @default(false)
}


model Supplier {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  shopOwnerId      String    @db.ObjectId
  shopOwner        ShopOwner @relation(fields: [shopOwnerId], references: [id], onDelete: Cascade)
  name             String
  phone            String
  institution      String
  address          String?
  totalDue         Float     @default(0) // how much due 
  totalPaid        Float     @default(0) // total paid
  totalTransaction Float     @default(0) // totalDue + totalPaid
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  PurchasedHistory PurchasedHistory[]

  Inventory Inventory[]

  SupplierPaymentHistory SupplierPaymentHistory[]
}
model SupplierPaymentHistory {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  paidAmount Float @default(0)
  deuAmount     Float? @default(0)
  transactionAmount Float @default(0) // total amount of the transaction if shop owner buys products

  // transactionStatus is used to track the status of the payment
  // whether it's for buying products or due payment
  transactionStatus TransactionStatus
  paymentDate   DateTime      @default(now())
  note          String?

  shopOwner   ShopOwner @relation(fields: [shopOwnerId], references: [id], onDelete: Cascade)
  shopOwnerId String    @db.ObjectId

  supplier   Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  supplierId String   @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TransactionStatus {
  BUYING_PRODUCTS
  DUE_PAYMENT
}